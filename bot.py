import telebot
import re
import time
import sqlite3
from telebot import types
from config import TOKEN, ADMIN_CHAT_ID
from validators import is_valid_phone
from storage import user_data, applications
from keyboards import smu_keyboard, task_keyboard
from admin import admin_keyboard_appr, admin_keyboard_ok
from rules import rules

bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('geodesy_bot.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                      user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      first_name TEXT,
                      registration_date TEXT)''')
    
    # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ - timestamp —Ç–µ–ø–µ—Ä—å TEXT –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    cursor.execute('''CREATE TABLE IF NOT EXISTS applications (
                      app_id TEXT PRIMARY KEY,
                      user_id INTEGER,
                      smu TEXT,
                      object TEXT,
                      task TEXT,
                      comment TEXT,
                      phone TEXT,
                      contact_name TEXT,
                      status TEXT,
                      timestamp TEXT,
                      FOREIGN KEY(user_id) REFERENCES users(user_id))''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def add_user_to_db(user_id, username, first_name):
    conn = sqlite3.connect('geodesy_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        registration_date = time.strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('INSERT INTO users VALUES (?, ?, ?, ?)', 
                      (user_id, username, first_name, registration_date))
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î
def add_application_to_db(app_data):
    conn = sqlite3.connect('geodesy_bot.db')
    cursor = conn.cursor()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    formatted_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(app_data['timestamp']))
    
    cursor.execute('''INSERT INTO applications VALUES 
                     (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                  (app_data['app_id'],
                   app_data['user_id'],
                   app_data['smu'],
                   app_data['object'],
                   app_data['task'],
                   app_data['comment'],
                   app_data['phone'],
                   app_data['contact_name'],
                   app_data['status'],
                   formatted_time))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –≤ –ë–î
def update_application_status(app_id, new_status):
    conn = sqlite3.connect('geodesy_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE applications SET status = ? WHERE app_id = ?', 
                  (new_status, app_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Ç–∞–º –µ—Å—Ç—å
    if app_id in applications:
        applications[app_id]['status'] = new_status
    
    conn.commit()
    conn.close()

def send_to_admin(text):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω—É"""
    bot.send_message(ADMIN_CHAT_ID, text, parse_mode='Markdown')

################### –ö–æ–º–∞–Ω–¥—ã ####################

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                     "/start - –ù–∞—á–∞–ª–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏\n"
                     "/help - –í—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥\n"
                     "/rules - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞ —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                     "/administrators - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

@bot.message_handler(commands=['start'])
def start(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user_to_db(
        message.from_user.id,
        message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        message.from_user.first_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    )
    
    user_data[message.chat.id] = {
        'user_info': {
            'id': message.from_user.id,
            'username': message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            'first_name': message.from_user.first_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        },
        'user_id': message.from_user.id
    }

    bot.send_message(message.chat.id, rules)
    bot.send_message(message.chat.id,
                    "üìã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ —Å–ª—É–∂–±–µ –≥–µ–æ–¥–µ–∑–∏–∏.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –°–ú–£:",
                    reply_markup=smu_keyboard())
    bot.register_next_step_handler(message, get_smu)

@bot.message_handler(commands=['rules'])
def start(message):
    bot.send_message(message.chat.id, rules)

@bot.message_handler(commands=['administrators'])
def help_command(message):
    bot.send_message(message.chat.id, "@DelfsDaniel - –í–æ–ª–∫–æ–≤ –î.–ê. –í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–ª—É–∂–±—ã –≥–µ–æ–¥–µ–∑–∏–∏")

################### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ ####################

def get_smu(message):
    chat_id = message.chat.id
    user_data[chat_id]['smu'] = message.text
    bot.send_message(chat_id, "üè¢ –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_object)

def get_object(message):
    chat_id = message.chat.id
    user_data[chat_id]['object'] = message.text
    bot.send_message(chat_id, "üîß –í–∏–¥ —Ä–∞–±–æ—Ç:", reply_markup=task_keyboard())
    bot.register_next_step_handler(message, get_task)

def get_task(message):
    chat_id = message.chat.id
    user_data[chat_id]['task'] = message.text
    bot.send_message(chat_id, "üìù –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∏–¥—É —Ä–∞–±–æ—Ç –∞ —Ç–∞–∫–∂–µ –¥–æ–º/—Ö–æ—Å—Ç–µ–ª:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_comment)

def get_comment(message):
    chat_id = message.chat.id
    user_data[chat_id]['comment'] = message.text
    bot.send_message(chat_id, "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ:")
    bot.register_next_step_handler(message, get_phone)

def get_phone(message):
    chat_id = message.chat.id
    phone = message.text
    
    if not is_valid_phone(phone):
        bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, get_phone)
        return
    
    user_data[chat_id]['phone'] = phone
    bot.send_message(chat_id, "üë§ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ:")
    bot.register_next_step_handler(message, get_contact_name)

def get_contact_name(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
    if chat_id not in user_data or 'contact_name' in user_data[chat_id]:
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    user_data[chat_id]['contact_name'] = message.text
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏
    app_id = str(int(time.time()))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    application = {
        'app_id': app_id,
        'user_id': message.from_user.id,
        'user_info': {
            'id': message.from_user.id,
            'username': message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            'first_name': message.from_user.first_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        },
        'smu': user_data[chat_id].get('smu', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
        'object': user_data[chat_id].get('object', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
        'task': user_data[chat_id].get('task', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
        'comment': user_data[chat_id].get('comment', '–Ω–µ—Ç'),
        'phone': user_data[chat_id].get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'contact_name': user_data[chat_id].get('contact_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
        'status': '–û–∂–∏–¥–∞–µ—Ç...',
        'timestamp': time.time()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
    applications[app_id] = application
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        add_user_to_db(
            message.from_user.id,
            message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            message.from_user.first_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )
        add_application_to_db(application)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    try:
        application_text = format_application(app_id)
        bot.send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
        bot.send_message(
            ADMIN_CHAT_ID,
            application_text,
            parse_mode='Markdown',
            reply_markup=admin_keyboard_ok(app_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ.")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id in user_data:
        del user_data[chat_id]

def format_application(app_id):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    app = applications.get(app_id)
    
    if not app:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        conn = None
        try:
            conn = sqlite3.connect('geodesy_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT user_id, smu, object, task, comment, phone, contact_name, status, timestamp 
                FROM applications WHERE app_id = ?
            ''', (app_id,))
            app_data = cursor.fetchone()
            
            if not app_data:
                return "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            cursor.execute('SELECT username, first_name FROM users WHERE user_id = ?', (app_data[0],))
            user_data = cursor.fetchone()
            
            app = {
                'user_info': {
                    'id': app_data[0],
                    'username': user_data[0] if user_data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    'first_name': user_data[1] if user_data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                },
                'smu': app_data[1],
                'object': app_data[2],
                'task': app_data[3],
                'comment': app_data[4],
                'phone': app_data[5],
                'contact_name': app_data[6],
                'status': app_data[7],
                'timestamp': app_data[8],
                'user_id': app_data[0]
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
            applications[app_id] = app
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏"
        finally:
            if conn:
                conn.close()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_icons = {
        '–û–∂–∏–¥–∞–µ—Ç...': 'üü°',
        '–í—ã–ø–æ–ª–Ω–µ–Ω–æ': '‚úÖ',
        '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ': '‚ùå',
        '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞': 'üü¢',
        '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞': '‚ùå'
    }
    
    return (
        f"üìÑ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
        f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\n"
        f"ID: `{app['user_info']['id']}`\n"
        f"Username: @{app['user_info']['username']}\n"
        f"–ò–º—è: {app['user_info']['first_name']}\n\n"
        f"üìå *–°–ú–£:* {app['smu']}\n"
        f"üè¢ *–û–±—ä–µ–∫—Ç:* {app['object']}\n"
        f"üîß *–í–∏–¥ —Ä–∞–±–æ—Ç:* {app['task']}\n"
        f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {app['comment']}\n"
        f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {app['phone']}\n"
        f"üë• *–§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:* {app['contact_name']}\n\n"
        f"üïí *–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:* {time.strftime('%d.%m.%Y %H:%M:%S', time.localtime(float(app['timestamp']))) if isinstance(app['timestamp'], (int, float)) else app['timestamp']}\n"
        f"üîò *–°—Ç–∞—Ç—É—Å:* {status_icons.get(app['status'], 'üü°')} {app['status']}"
    )


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if not call.data or '_' not in call.data:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
            return
            
        action, app_id = call.data.split('_', 1)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –∏–∑ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –ë–î
        app = applications.get(app_id)
        if not app:
            conn = None
            try:
                conn = sqlite3.connect('geodesy_bot.db')
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
                cursor.execute('''
                    SELECT user_id, smu, object, task, comment, phone, contact_name, status, timestamp 
                    FROM applications WHERE app_id = ?
                ''', (app_id,))
                app_data = cursor.fetchone()
                
                if not app_data:
                    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                cursor.execute('SELECT username, first_name FROM users WHERE user_id = ?', (app_data[0],))
                user_data = cursor.fetchone()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏
                app = {
                    'user_info': {
                        'id': app_data[0],
                        'username': user_data[0] if user_data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                        'first_name': user_data[1] if user_data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    },
                    'user_id': app_data[0],
                    'smu': app_data[1],
                    'object': app_data[2],
                    'task': app_data[3],
                    'comment': app_data[4],
                    'phone': app_data[5],
                    'contact_name': app_data[6],
                    'status': app_data[7],
                    'timestamp': app_data[8]
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
                applications[app_id] = app
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏")
                return
            finally:
                if conn:
                    conn.close()
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback...
        status_map = {
            'approve': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'reject': '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
            'ok': '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞',
            'dont': '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        }
        
        if action not in status_map:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
            
        new_status = status_map[action]
        app['status'] = new_status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        try:
            update_application_status(app_id, new_status)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            user_id = app['user_id']
            messages = {
                'approve': "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
                'reject': "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                'ok': "‚ùó –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞.",
                'dont': "‚ùó –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            }
            bot.send_message(user_id, messages[action])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
        try:
            reply_markup = None
            if action == 'ok':
                reply_markup = admin_keyboard_appr(app_id)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=format_application(app_id),
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True)